subprojects {
    configurations {
        sharedLib
        sharedBin
    }

    apply plugin: 'eu.xenit.docker-alfresco'

    if (new File("${project.projectDir}/overload.gradle").exists())
        apply from: "${project.projectDir}/overload.gradle"

    task copyLocalResources(type: Copy) {
        from "$project.projectDir/../local"
        into "${project.buildDir}/docker"
    }

    task processDockerResources(type: Copy) {
        from "${project.parent.projectDir}/src/main/resources/"
        into "${project.buildDir}/docker"
        dependsOn(copyLocalResources)
    }

    def parentProject = project(":2repository:${project.projectDir.name}")
    def parentImage = parentProject.getTasks().getByName('buildDockerImage')

    buildDockerImage.dependsOn(parentImage, processDockerResources)

    createDockerFile {
        copyFile 'share-config-custom.xml', '/docker-config/'
        copyFile '91-init-share-customized.sh', '/docker-entrypoint.d/'
        runCommand '''\
chmod u+x /docker-entrypoint.d/91-init-share-customized.sh && \
mkdir -p "${CATALINA_HOME}/shared/classes/alfresco/web-extension/" && \
chown -R tomcat:tomcat "${CATALINA_HOME}/shared/classes/alfresco/web-extension/"
        '''
        environmentVariable('ALFRESCO_FLAVOR', "${project.alfresco.flavor}")
        environmentVariable('ALFRESCO_VERSION', "${project.alfresco.version.major}.${project.alfresco.version.minor}.${project.alfresco.version.rev}")

        doFirst {
            if (!configurations.sharedLib.isEmpty()) {
                smartCopy(configurations.sharedLib, '${CATALINA_HOME}/shared/lib/')
            }
            if (!configurations.sharedBin.isEmpty()) {
                smartCopy(tarTree(resources.gzip(configurations.sharedBin.singleFile)), '/opt/alfresco')
            }
        }
    }

    dockerAlfresco {
        baseImage = parentImage.getImageId()
        dockerBuild {
            repository = "hub.xenit.eu/alfresco-enterprise/alfresco-enterprise"
            tags = parentProject.extensions.findByName("dockerAlfresco").dockerBuild.tags
            pull = false
        }
    }
}
