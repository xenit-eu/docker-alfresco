subprojects {
    group = 'eu.xenit'
    version '1.0'

    apply plugin: 'eu.xenit.docker'
    apply plugin: 'java'
    apply plugin: "maven-publish"

    apply from: "${rootProject.projectDir}/jacoco.gradle"

    if (new File("${project.projectDir}/overload.gradle").exists()) {
        apply from: "${project.projectDir}/overload.gradle"
    }

    def tomcatVersion = project.tomcat.version

    configurations {
        sharedLibs
    }

    dependencies {

        compileOnly "org.projectlombok:lombok:1.18.24"
        annotationProcessor "org.projectlombok:lombok:1.18.24"

        implementation "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"
        implementation "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
        implementation "org.apache.tomcat:tomcat-jasper:${tomcatVersion}"
        implementation "org.apache.tomcat:tomcat-jasper-el:${tomcatVersion}"
        implementation "org.apache.tomcat:tomcat-jsp-api:${tomcatVersion}"
        implementation "eu.xenit.logging:json-logging:0.0.3"
        implementation "com.fasterxml.jackson.core:jackson-databind:2.13.1"

        testImplementation "org.junit.jupiter:junit-jupiter-api:5.9.0"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.9.0"
        sharedLibs("eu.xenit.logging:json-logging:0.0.3") {
            transitive = false
        }
    }

    boolean isRelease = ci.branch?.equals("master")
    if (!isRelease) {
        version += "-SNAPSHOT"
    }

    test {
        useJUnitPlatform()
    }

    sourceSets {
        main {
            java {
                srcDir file("$project.parent.projectDir/src/shared/main/java")
            }
        }
        test {
            java {
                srcDir file("$project.parent.projectDir/src/shared/test/java")

            }
            resources {
                srcDir file("$project.parent.projectDir/src/shared/test/resources")

            }
        }
    }

    archivesBaseName = 'xenit-tomcat-embedded'

    dockerBuild {
        repositories = ['docker.io/xenit/tomcat']
        tags = [tomcatVersion]
    }

    createDockerFile {
        from 'docker.io/eclipse-temurin:11'
        smartCopy configurations.sharedLibs, '/usr/local/tomcat/shared/lib/'
        smartCopy "${project.parent.projectDir}/src/shared/main/resources/keystore", '/keystore'
        smartCopy configurations.runtimeClasspath, '/app/tomcat-embedded/lib'
        def jarName = archivesBaseName + '.jar'
        dependsOn jar
        smartCopy jar.outputs.files.singleFile, "/app/tomcat-embedded/$jarName"
        smartCopy "${project.parent.projectDir}/src/shared/main/bash/entrypoint/", '/'

        def buildDate = project.properties.getOrDefault("buildDate", (new Date().getTime() / 1000).toString());
        environmentVariable('BUILD_DATE', buildDate)

        runCommand 'useradd -u 990 tomcat'
        runCommand 'mkdir -p /usr/local/tomcat/shared/classes'
        runCommand 'mkdir -p /usr/local/tomcat/temp && chown tomcat:tomcat /usr/local/tomcat/temp'
        workingDir '/usr/local/tomcat/temp'
        entryPoint('/docker-entrypoint.sh')
        def classPath = "/app/tomcat-embedded/$jarName:/app/tomcat-embedded/lib/*"
        volume "/usr/local/tomcat/temp"
        defaultCommand('java', '$JAVA_OPTS', '-cp', classPath, 'eu.xenit.alfresco.tomcat.embedded.Main')
        instruction("HEALTHCHECK CMD java -cp $classPath eu.xenit.alfresco.tomcat.embedded.healthcheck.HealthCheck")
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId = 'eu.xenit'
                from components.java
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.toString().endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                if (project.hasProperty("sonatype_username")) {
                    credentials {
                        username property("sonatype_username")
                        password property("sonatype_password")
                    }
                }
            }
        }
    }
}