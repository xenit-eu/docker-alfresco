import com.avast.gradle.dockercompose.tasks.ComposeDown

subprojects {
    apply plugin: 'eu.xenit.docker-alfresco'

    configurations {
        sharedLib
        sharedBin
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    sourceSets {
        integrationTest {
            java {
                srcDir file("$project.parent.projectDir/src/integrationTest/java")
            }
        }
    }

    dependencies {
        integrationTestImplementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.7'
        integrationTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: '3.0.1'
        integrationTestImplementation group: 'io.rest-assured', name: 'json-path', version: '3.0.1'
        integrationTestImplementation group: 'io.rest-assured', name: 'rest-assured-common', version: '3.0.1'
        integrationTestImplementation group: 'junit', name: 'junit', version: '4.11'
        integrationTestImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    }


    if (new File("${project.projectDir}/overload.gradle").exists())
        apply from: "${project.projectDir}/overload.gradle"

    def skeleton = ":skeleton:${project.alfresco.version.major}" + "." + "${project.alfresco.version.minor}"
    def path = "${skeleton}:buildDockerImage"
/*    def parentProject = project(":skeleton:${project.alfresco.version.major}" + "." + "${project.alfresco.version.minor}")
    def parentImage = parentProject.getTasks().getByName('buildDockerImage')*/


    dockerAlfresco {
        baseImage = { project(skeleton).getTasks().getByName('buildDockerImage').getImageId() }
        dockerBuild {
            if (!(project.hasProperty("repoName"))) {
                ext.repoName = "hub.xenit.eu"
            }
            def namespace = (project.alfresco.flavor == "enterprise" ? "alfresco-enterprise" : "public");
            repository = ((repoName == "hub.xenit.eu") ?
                    "${repoName}" + "/" + namespace + "/" + "alfresco-repository-${project.alfresco.flavor}" :
                    "${repoName}" + "/" + "alfresco-repository-${project.alfresco.flavor}")
            tags = calcTags(project.alfresco.version)
            automaticTags = false
        }
    }

    afterEvaluate {
        //createDockerFile.dependsOn(parentImage)
        createDockerFile.dependsOn(path)

        if (project.hasProperty('testsChangedPorts') && project.testsChangedPorts)
            changedPortsComposeUp.dependsOn(buildDockerImage)
        else
            changedPortsComposeUp.enabled = false

        // nested configurations do not get the DOCKER_IMAGE
        buildDockerImage {
            doLast {
                if (project.hasProperty('testsChangedPorts') && project.testsChangedPorts)
                    dockerCompose.changedPorts.environment.put 'DOCKER_IMAGE', getImageId()
            }
        }


        createDockerFile {
            inputs.files configurations.sharedLib
            inputs.files configurations.sharedBin

            environmentVariable('ALFRESCO_FLAVOR', "${project.alfresco.flavor}")
            environmentVariable('ALFRESCO_VERSION', "${project.alfresco.version.major}.${project.alfresco.version.minor}.${project.alfresco.version.rev}")

            doFirst {
                project.delete(file("${destFile.parent}/shared"))
                copy {
                    from configurations.sharedLib
                    into destFile.parent + "/shared/lib"
                }

                if (!configurations.sharedBin.isEmpty()) {
                    copy {
                        from tarTree(resources.gzip(configurations.sharedBin.singleFile))
                        into destFile.parent + "/shared/bin"
                    }
                }
            }

            if (!configurations.sharedLib.isEmpty()) {
                copyFile './shared/lib/*.jar', '${CATALINA_HOME}/shared/lib/'
            }
            if (!configurations.sharedBin.isEmpty()) {
                copyFile './shared/bin/*', '/opt/alfresco'
            }
        }
    }

    task integrationTestDefault(type: Test, group: "verification") {
        enabled = (project.hasProperty('tests') && project.tests)

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }

        doFirst {
            dockerCompose.exposeAsSystemProperties(integrationTestDefault)

            systemProperty 'alfresco.port.internal', '8080'
            systemProperty 'flavor', "${project.alfresco.flavor}"
            systemProperty 'version', "${project.alfresco.version.major}" + "." + "${project.alfresco.version.minor}"
        }
    }

    task integrationTestChangedPorts(type: Test, group: "verification") {
        enabled = (project.hasProperty('testsChangedPorts') && project.testsChangedPorts)

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }

        doFirst {
            dockerCompose.changedPorts.exposeAsSystemProperties(integrationTestChangedPorts)

            systemProperty 'alfresco.port.internal', '5656'
            systemProperty 'flavor', "${project.alfresco.flavor}"
            systemProperty 'version', "${project.alfresco.version.major}" + "." + "${project.alfresco.version.minor}"
        }
    }

    task integrationTests(type: Test, group: "verification") {
        workingDir = rootProject.projectDir
        dependsOn integrationTestDefault
        dependsOn integrationTestChangedPorts
    }

    check.dependsOn(integrationTests)

    docker {
        if (System.getenv("DOCKER_USER") != null) {
            registryCredentials {
                username = System.getenv("DOCKER_USER")
                password = System.getenv("DOCKER_PASSWORD")
            }
        } else {
            logger.debug "using default credentials"
        }
    }

    dockerCompose {

        if (project.hasProperty('tests') && project.tests) {
            isRequiredBy(project.tasks.integrationTestDefault)

            environment.put 'SHARE_IMAGE', project.shareimage
            environment.put 'SOLR_IMAGE', project.solrimage
            environment.put 'SOLR_PORT_SSL', '8443'

            def composeDir = "${project.parent.projectDir}/src/integrationTest/resources";

            if (project.alfresco.version.major.toInteger() < 6) {
                useComposeFiles = ["$composeDir/docker-compose-alfresco.yml", "$composeDir/docker-compose-share.yml",
                                   "$composeDir/docker-compose-solr.yml", "$composeDir/docker-compose-db.yml"];

            } else {
                useComposeFiles = ["$composeDir/docker-compose-alfresco.yml", "$composeDir/docker-compose-share.yml",
                                   "$composeDir/docker-compose-solr.yml", "$composeDir/docker-compose-db.yml", "$composeDir/docker-compose-transformers.yml"];
            }

            changedPorts {
                isRequiredBy(project.tasks.integrationTestChangedPorts)

                environment.put 'ALFRESCO_PORT', '5656'
                environment.put 'ALFRESCO_PORT_SSL', '5657'
                environment.put 'SOLR_PORT', '2323'
                environment.put 'SOLR_PORT_SSL', '2324'

                useComposeFiles = ["$composeDir/docker-compose-alfresco-changed-ports.yml", "$composeDir/docker-compose-solr-changed-ports.yml",
                                   "$composeDir/docker-compose-db.yml", "$composeDir/docker-compose-transformers.yml"];
            }
        }
    }

    task composeDownAll {
        dependsOn project.tasks.withType(ComposeDown)
    }
}
