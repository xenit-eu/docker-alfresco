import com.avast.gradle.dockercompose.tasks.ComposeDown

subprojects {
    apply plugin: 'eu.xenit.docker-alfresco'
    apply plugin: 'eu.xenit.docker-compose'

    configurations {
        sharedLib
        sharedBin
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    sourceSets {
        integrationTest {
            java {
                srcDir file("$project.parent.projectDir/src/integrationTest/java")
            }
        }
    }

    dependencies {
        integrationTestImplementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.7'
        integrationTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: '3.0.1'
        integrationTestImplementation group: 'io.rest-assured', name: 'json-path', version: '3.0.1'
        integrationTestImplementation group: 'io.rest-assured', name: 'rest-assured-common', version: '3.0.1'
        integrationTestImplementation group: 'junit', name: 'junit', version: '4.11'
        integrationTestImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        integrationTestImplementation "jakarta.xml.bind:jakarta.xml.bind-api:2.3.2"
        integrationTestImplementation "org.glassfish.jaxb:jaxb-runtime:2.3.2"

    }


    if (new File("${project.projectDir}/overload.gradle").exists())
        apply from: "${project.projectDir}/overload.gradle"

    def parentProject = project(":1skeleton:${project.alfresco.version.major}" + "." + "${project.alfresco.version.minor}")
    def parentImage = parentProject.getTasks().getByName('buildDockerImage')

    dockerBuild {
        repositories = [calcRepository(project.alfresco.flavor)]
        tags = calcTags(project.alfresco.version)
        alfresco {
            baseImage = parentImage.getImageId()
        }
    }

    createDockerFile {
        smartCopy(configurations.sharedLib, '${CATALINA_HOME}/shared/lib/')
        if (!configurations.sharedBin.isEmpty())
            smartCopy(tarTree(resources.gzip(configurations.sharedBin.singleFile)), '/opt/alfresco')

        environmentVariable('ALFRESCO_FLAVOR', "${project.alfresco.flavor}")
        environmentVariable('ALFRESCO_VERSION', "${project.alfresco.version.major}.${project.alfresco.version.minor}.${project.alfresco.version.rev}")

        def buildDate = project.properties.getOrDefault("buildDate", (new Date().getTime() / 1000).toString());
        environmentVariable('BUILD_DATE', buildDate)
    }

    createDockerFile.dependsOn(parentImage)

    // nested configurations do not get the DOCKER_IMAGE
    buildDockerImage {
        pull = false
        doLast {
            if (project.hasProperty('testsChangedPorts') && project.testsChangedPorts)
                dockerCompose.changedPorts.environment.put 'DOCKER_IMAGE', getImageId().get()
        }
    }

    task integrationTestDefault(type: Test, group: "verification") {
        enabled = (project.hasProperty('tests') && project.tests)

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }

        doFirst {
            dockerCompose.exposeAsSystemProperties(integrationTestDefault)

            systemProperty 'alfresco.port.internal', '8080'
            systemProperty 'flavor', "${project.alfresco.flavor}"
            systemProperty 'version', "${project.alfresco.version.major}" + "." + "${project.alfresco.version.minor}"
        }
    }

    task integrationTestChangedPorts(type: Test, group: "verification") {
        enabled = (project.hasProperty('testsChangedPorts') && project.testsChangedPorts)

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }

        doFirst {
            dockerCompose.changedPorts.exposeAsSystemProperties(integrationTestChangedPorts)

            systemProperty 'alfresco.port.internal', '5656'
            systemProperty 'flavor', "${project.alfresco.flavor}"
            systemProperty 'version', "${project.alfresco.version.major}" + "." + "${project.alfresco.version.minor}"
        }
    }

    task integrationTests(type: Test, group: "verification") {
        workingDir = rootProject.projectDir
        dependsOn integrationTestDefault
        dependsOn integrationTestChangedPorts
    }

    check.dependsOn(integrationTests)

    dockerCompose {

        if (project.hasProperty('tests') && project.tests) {
            isRequiredBy(project.tasks.integrationTestDefault)

            environment.put 'SHARE_IMAGE', project.shareimage
            environment.put 'SOLR_IMAGE', project.solrimage
            if (project.hasProperty("psqlimage")) {
                environment.put 'PSQL_IMAGE', project.psqlimage
            }
            environment.put 'SOLR_PORT_SSL', '8443'

            def composeDir = "${project.parent.projectDir}/src/integrationTest/resources";

            useComposeFiles = ["$composeDir/docker-compose-alfresco-minimal.yml",
                               "$composeDir/docker-compose-solr.yml", "$composeDir/docker-compose-db.yml"];

            changedPorts {
                isRequiredBy(project.tasks.integrationTestChangedPorts)

                environment.put 'ALFRESCO_PORT', '5656'
                environment.put 'ALFRESCO_PORT_SSL', '5657'
                environment.put 'SOLR_PORT', '2323'
                environment.put 'SOLR_PORT_SSL', '2324'

                useComposeFiles = ["$composeDir/docker-compose-alfresco-changed-ports.yml", "$composeDir/docker-compose-solr-changed-ports.yml",
                                   "$composeDir/docker-compose-db.yml"];
            }
        }
    }

    task composeDownAll {
        dependsOn project.tasks.withType(ComposeDown)
    }

    if (project.hasProperty('testsChangedPorts') && project.testsChangedPorts)
        changedPortsComposeUp.dependsOn(buildDockerImage)
    else
        changedPortsComposeUp.enabled = false

}
