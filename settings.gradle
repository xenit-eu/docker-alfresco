/*
 * This settings file was generated by the Gradle 'init' task.
 *
 * The settings file is used to specify which projects to include in your build.
 * In a single project build this file can be empty or even removed.
 *
 * Detailed information about configuring a multi-project build in Gradle can be found
 * in the user guide at https://docs.gradle.org/4.0/userguide/multi_project_builds.html
 */

def includeSubprojectPerVersion(major,flavor,includeLegacy) {

    new File("$rootProject.projectDir/2repository")

            .listFiles({ File version -> version.name.startsWith(major)
            } as FileFilter)

            .collectMany({ File versionFlavor ->
                versionFlavor.listFiles({ File file -> file.name.contains(flavor)
                } as FileFilter).toList()
            })

            .each { File repositoryFile ->
                def version = repositoryFile.parentFile.name
                def revision = repositoryFile.name
                def projectSkeleton = "1skeleton:${version}"
                def projectRepository = "2repository:${revision}"
                def projectLegacy = "3legacy:${revision}"

                println "Including $projectSkeleton"
                include projectSkeleton
                project(":${projectSkeleton}").projectDir = file("1skeleton/${version}")

                println "Including $projectRepository"
                include projectRepository
                project(":${projectRepository}").projectDir = file("2repository/${version}/${revision}")

                if (includeLegacy && new File("3legacy/${version}/${revision}").exists()) {
                    println "Including $projectLegacy"
                    include projectLegacy
                    project(":${projectLegacy}").projectDir = file("3legacy/${version}/${revision}")
                }
            }
}

rootProject.name = 'docker-alfresco'

include 'docker-init-script'

if(System.getenv("VERSIONS_TO_BUILD")==null || System.getenv("VERSIONS_TO_BUILD").equals("4")) {
    includeSubprojectPerVersion("4.","community",hasProperty("legacy"))
    if(hasProperty("enterprise")) {
        includeSubprojectPerVersion("4.","enterprise",hasProperty("legacy"))
    }
}


if(System.getenv("VERSIONS_TO_BUILD")==null || System.getenv("VERSIONS_TO_BUILD").equals("5")) {
    includeSubprojectPerVersion("5.","community",hasProperty("legacy"))
    if(hasProperty("enterprise")) {
        includeSubprojectPerVersion("5.","enterprise",hasProperty("legacy"))
    }
}

if(System.getenv("VERSIONS_TO_BUILD")==null || System.getenv("VERSIONS_TO_BUILD").equals("6")) {
    includeSubprojectPerVersion("6.","community",hasProperty("legacy"))
    if(hasProperty("enterprise")) {
        includeSubprojectPerVersion("6.","enterprise",hasProperty("legacy"))
    }
}
